name: Release new version
description: Release python project on pypi and github

inputs:
  pre-release-tag:
    description: 'Tag for pre-release'
    default: ''
    required: true
  major-release:
    description: 'Trigger a major release. Leave empty for regular release.'
    default: ''
    required: true
  pypi-username:
    description: 'Pypi username for deployment'
    required: true
  pypi-password:
    description: 'Pypi password for deployment'
    required: true
  version-file-path:
    description: 'Path to the file containing __version__ = '
    required: true
  main-branch:
    description: 'Name of the main branch in the repo'
    default: 'main'
    required: false
  version-override:
    description: 'Override automatic version generation'
    required: false
    
runs:
  using: "composite"
  steps:
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
      shell: bash
        
    - name: Setup git config
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
      shell: bash

    - name: Get changes since last release
      id: get_changes
      if: inputs.version-override == ''
      run: |
        OLD_TAG=$(git describe --tags --abbrev=0)
        echo "Old tag was ${OLD_TAG}"
        CHANGE_LOG=$(git log $OLD_TAG..HEAD --pretty=format:%s)
        echo "changes<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGE_LOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "old_tag=$OLD_TAG" >> $GITHUB_OUTPUT
      shell: bash

    - name: Generate new version tag
      id: tag_generation
      if: inputs.version-override == ''
      uses: firebolt-db/action-generate-version@main
      with:
        changes: ${{ steps.get_changes.outputs.changes }}
        old-tag: ${{ steps.get_changes.outputs.old_tag }}
        prerelease-tag: ${{ inputs.pre-release-tag }}
        major-release: ${{ inputs.major-release }}

    - name: Use overridden tag if supplied
      id: tag_resolution
      run: |
        TAG=${{ steps.tag_generation.outputs.new-tag }}${{ inputs.version-override }}
        echo "new_tag=${TAG}" >> "${GITHUB_OUTPUT}"
      shell: bash

    - name: Version bump
      run: |
        # Bump version = <number> in version file
        sed -i "s/^__version__ = .*/__version__ = \"${{ steps.tag_resolution.outputs.new_tag }}\"/" ${{ inputs.version-file-path }}
        git add ${{ inputs.version-file-path }}
        git commit -m "Automatic version bump to ${{ steps.tag_resolution.outputs.new_tag }}"
        git push origin ${{ inputs.main-branch }}
      shell: bash
        
    - name: Publish tag on github
      run: |
        git tag ${{ steps.tag_resolution.outputs.new_tag }}
        git push origin ${{ steps.tag_resolution.outputs.new_tag }}
      shell: bash

    - name: Release on github
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_resolution.outputs.new_tag }}
        generate_release_notes: true
        prerelease: ${{ inputs.pre-release-tag != '' }}

    - name: Publish to pypi
      run: |
        python3 -m build
        python3 -m twine upload dist/*
      env:
        TWINE_USERNAME: ${{ inputs.pypi-username }}
        TWINE_PASSWORD: ${{ inputs.pypi-password }}
      shell: bash
